package main

//go:generate swag init -o ./generated_swagger

import (
	"fmt"
	"os"

	"github.com/ibraimgm/backend/migrations"

	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/go-sql-driver/mysql"                // database driver (mysql)
	_ "github.com/ibraimgm/backend/generated_swagger" // generated by go generate
)

// @title Swagger Example API
// @version 1.0
// @description This is sample backend for HostGator Latin America Challenge
// @termsOfService http://swagger.io/terms/

// @BasePath /
func main() {
	// read configuration from env vars
	// also, print the values found, for debgging purposes
	driver := readEnv("DB_DRIVER", "mysql")
	dbURL := readEnv("DB_URL", "hg:hg@/hg?parseTime=true")
	port := readEnv("PORT", "8080")
	serverName := readEnv("SERVER_NAME", "localhost")
	swaggerDoc := fmt.Sprintf("http://%s:%s/swagger/doc.json", serverName, port)
	swaggerIndex := fmt.Sprintf("http://%s:%s/swagger/index.html", serverName, port)

	fmt.Println("Using the following configuration values:")
	fmt.Println("  DB_DRIVER   = ", driver)
	fmt.Println("  DB_URL      = ", dbURL)
	fmt.Println("  PORT        = ", port)
	fmt.Println("  SERVER_NAME = ", serverName)
	fmt.Println()
	fmt.Println("- Swagger doc location: ", swaggerDoc)
	fmt.Println("- Swagger doc index: ", swaggerIndex)

	// connect to database
	fmt.Print("- Connecting to database...")
	db, err := sqlx.Connect(driver, dbURL)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	defer db.Close()
	fmt.Println("OK!")

	// migrations
	fmt.Print("- Running migrations...")
	if err := migrations.Run(driver, db.DB); err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	fmt.Println("OK!")

	r := gin.Default()
	url := ginSwagger.URL(swaggerDoc)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})

	if err := r.Run(); err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

func readEnv(key, defaultValue string) string {
	s := os.Getenv(key)
	if s != "" {
		return s
	}

	return defaultValue
}
